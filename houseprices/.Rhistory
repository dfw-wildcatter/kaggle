y$formatted.position[y$name=='HENRY']<-.0001*y[y$name=='HENRY',]$discounted.position;
y$formatted.position[y$name=='BRENT']<-.001*y[y$name=='BRENT',]$discounted.position;
y$formatted.position[y$name=='WTI']<-.001*y[y$name=='WTI',]$discounted.position;
y$formatted.position[y$name=='RBOB']<-1/42000*y[y$name=='RBOB',]$discounted.position;
y$formatted.position[y$name=='NYH']<-1/42000*y[y$name=='NYH',]$discounted.position;
ggplot(y, aes(x=delivery, y=formatted.position, fill = delivery)) +
geom_bar(stat = "identity") + ggtitle('Discounted linear positions for all risk factors\nby reference curve and expressed in exchange lots') +
facet_grid(. ~ name) + scale_fill_discrete(name='delivery month') +
theme(plot.title=element_text(face='bold'), axis.text.x=element_blank(), axis.ticks.x=element_blank(),axis.text.y=element_text(colour='black'),
axis.title.x=element_text(colour='darkgrey'),axis.title.y=element_text(colour='darkgrey')) +
guides(fill=guide_legend(ncol=2))+ylab('exchange lots')
pnl.lin.agg
tb<-read.table('upload_vanilla.csv', header=TRUE, sep=",");
idx<-apply(tb, 1, function(x) pmatch(x[1], labels, nomatch=0));
ttm<-0.001+(as.Date(as.character(tb$expiration.date))-as.Date(dt[41,]))/365;
tmp<-rbind(F0[idx], tb$put.call, tb$strike.price, 0.01*tb$volatility*sqrt(as.numeric(ttm)),
ttm, tb$discount.factor);
V0<-apply(tmp,2, function(x) RcppBlackFormula(ifelse(x[2]==1,'call','put'), x[3], x[1], x[4], x[5]));
tmp<-rbind(tmp, t(F1[idx,]));
sz<-dim(tmp);
V1<- matrix(data=NA,nrow=sims,ncol=sz[2]);
for(i in 1:sz[2])
V1[1:sims,i]<-RcppBlackFormulaArray(ifelse(tmp[2,i]==1,'call','put'), tmp[3,i], tmp[7:sz[1],i], tmp[4,i], tmp[5,i])
pnl.opt<-tb$volume*(V1-rep(V0,sims));
pnl.opt
head(pnl.opt)
dim(pnl.opt)
dim(pnl.lin)
y<-.001*apply(pnl.lin,1,function(x) quantile(x, 1, probs=0.025, 0.975));
y<-as.data.frame(y, row.names=labels);
names(y)[1]<-'linear.pnl';
tmp<- gsub("(\\b.SWAP\\b|\\b.FUTURES\\b|\\b.CRUDE\\b|\\b.GAS\\b|\\b.GASOLINE\\b|\\b.ULSD\\b)", "", rownames(y))
y$name<-gsub('[.0-9]','',tmp);
y$delivery<-gsub('[^0-9]','',tmp);
ggplot(y, aes(x=delivery, y=linear.pnl, fill = delivery)) +
geom_bar(stat = "identity") + ggtitle('1-day 97.5% confidence value-at-risk on linear positions\nby reference curve and expressed in (Thousands) $') +
facet_grid(. ~ name) + scale_fill_discrete(name='delivery month') +
theme(plot.title=element_text(face='bold'), axis.text.x=element_blank(), axis.ticks.x=element_blank(),axis.text.y=element_text(colour='black'),
axis.title.x=element_text(colour='darkgrey'),axis.title.y=element_text(colour='darkgrey')) +
guides(fill=guide_legend(ncol=2)) +ylab('1-day value-at-risk')
ggplot(y, aes(x=delivery, y=linear.pnl, fill = delivery)) +
geom_bar(stat = "identity") + ggtitle('1-day 97.5% confidence value-at-risk on linear positions\nby reference curve and expressed in (Thousands)$') +
facet_grid(. ~ name) + scale_fill_discrete(name='delivery month') +
theme(plot.title=element_text(face='bold'), axis.text.x=element_blank(), axis.ticks.x=element_blank(),axis.text.y=element_text(colour='black'),
axis.title.x=element_text(colour='darkgrey'),axis.title.y=element_text(colour='darkgrey')) +
guides(fill=guide_legend(ncol=2)) +ylab('1-day value-at-risk')
head(pnl.opt)
head(pnl.opt.agg)
pnl.opt.agg <-apply(pnl.opt,2,sum);
head(pnl.opt.agg)
pnl.opt.agg <-apply(pnl.opt,1,sum);
dim(pnl.opt.agg)
pnl.opt.agg
pnl.opt
dim(pnl.opt)
tb
head(tb)
y<-.001*apply(pnl.opt,1,function(x) quantile(x, 1, probs=0.025, 0.975));
y<-as.data.frame(y, row.names=tb$risk.factor);
names(y)[1]<-'option.pnl';
tmp<- gsub("(\\b.SWAP\\b|\\b.FUTURES\\b|\\b.CRUDE\\b|\\b.GAS\\b|\\b.GASOLINE\\b|\\b.ULSD\\b)", "", rownames(y))
y$name<-gsub('[.0-9]','',tmp);
y$delivery<-gsub('[^0-9]','',tmp);
ggplot(y, aes(x=delivery, y=linear.pnl, fill = delivery)) +
geom_bar(stat = "identity") + ggtitle('1-day 97.5% confidence value-at-risk on linear positions\nby reference curve and expressed in (Thousands)$') +
facet_grid(. ~ name) + scale_fill_discrete(name='delivery month') +
theme(plot.title=element_text(face='bold'), axis.text.x=element_blank(), axis.ticks.x=element_blank(),axis.text.y=element_text(colour='black'),
axis.title.x=element_text(colour='darkgrey'),axis.title.y=element_text(colour='darkgrey')) +
guides(fill=guide_legend(ncol=2)) +ylab('1-day value-at-risk')
head(y)
tb$risk.factor
y<-.001*apply(pnl.opt,1,function(x) quantile(x, 1, probs=0.025, 0.975));
y<-as.data.frame(y, row.names=as.character(tb$risk.factor);
y<-as.data.frame(y, row.names=as.character(tb$risk.factor));
head(y)
names(y)[1]<-'option.pnl';
tmp<- gsub("(\\b.SWAP\\b|\\b.FUTURES\\b|\\b.CRUDE\\b|\\b.GAS\\b|\\b.GASOLINE\\b|\\b.ULSD\\b)", "", rownames(y))
y$name<-gsub('[.0-9]','',tmp);
y$delivery<-gsub('[^0-9]','',tmp);
ggplot(y, aes(x=delivery, y=linear.pnl, fill = delivery)) +
geom_bar(stat = "identity") + ggtitle('1-day 97.5% confidence value-at-risk on linear positions\nby reference curve and expressed in (Thousands)$') +
facet_grid(. ~ name) + scale_fill_discrete(name='delivery month') +
theme(plot.title=element_text(face='bold'), axis.text.x=element_blank(), axis.ticks.x=element_blank(),axis.text.y=element_text(colour='black'),
axis.title.x=element_text(colour='darkgrey'),axis.title.y=element_text(colour='darkgrey')) +
guides(fill=guide_legend(ncol=2)) +ylab('1-day value-at-risk')
y<-.001*apply(pnl.opt,1,function(x) quantile(x, 1, probs=0.025, 0.975));
y<-as.data.frame(y, row.names=as.character(tb$risk.factor));
names(y)[1]<-'option.pnl';
tmp<- gsub("(\\b.SWAP\\b|\\b.FUTURES\\b|\\b.CRUDE\\b|\\b.GAS\\b|\\b.GASOLINE\\b|\\b.ULSD\\b)", "", rownames(y))
y$name<-gsub('[.0-9]','',tmp);
y$delivery<-gsub('[^0-9]','',tmp);
ggplot(y, aes(x=delivery, y=option.pnl, fill = delivery)) +
geom_bar(stat = "identity") + ggtitle('1-day 97.5% confidence value-at-risk on linear positions\nby reference curve and expressed in (Thousands)$') +
facet_grid(. ~ name) + scale_fill_discrete(name='delivery month') +
theme(plot.title=element_text(face='bold'), axis.text.x=element_blank(), axis.ticks.x=element_blank(),axis.text.y=element_text(colour='black'),
axis.title.x=element_text(colour='darkgrey'),axis.title.y=element_text(colour='darkgrey')) +
guides(fill=guide_legend(ncol=2)) +ylab('1-day value-at-risk')
# +++/comments for git commits/+++
#
# +++to do+++
#   #calculate var by pricinggroupid
#   #add options (Eur, Ame, Asi, Spr...)
#     + update option formulas (Black requires sd not vol)
#   #add scenario-analysis (shift sig+1...)
#
# initialize
#
rm(list=ls())
setwd('/home/kumo/Documents/Risk')
sims<-1e4;
#options(stringsAsFactors = FALSE)
cat('+++Preparing environment+++')
source('config.r')
# fetch list of past 41 business days (US calendar)
# fetch allin-prices for simulated risk factors (i.e. dependency = NULL)
# fetch leg weights for calculated risk factors (i.e. dependency != NULL)
#
dt<-read.table('upload_dates.csv', header=TRUE, colClasses = "character");
dt.str<-paste(shQuote(t(dt)), collapse=", ");
con<-RMySQL::dbConnect(RMySQL::MySQL(), user='sec_user', password='taleb10',dbname='KUMO', host='localhost')
qry<- paste('SELECT t1.refforwardcurve_pricinggroupid, t1.refforwardcurve_name,
t1.refforwardcurve_curvepointcode, t1.pricedate, t1.allinprice
FROM markforwardcurve t1
WHERE t1.refforwardcurve_name IN (
SELECT DISTINCT t2.name
FROM refforwardcurve t2
WHERE t2.id = t1.refforwardcurve_id AND t2.pricedependency IS NULL
)
AND t1.pricedate IN (',dt.str,')
ORDER BY t1.refforwardcurve_name, refforwardcurve_curvepointcode')
rs.sim<-RMySQL::dbGetQuery(con, qry)
qry<-' SELECT refforwardcurve_name, refforwardcurve_curvepointcode, independentcurvename,
independentcurvepointcode,leg, weight
FROM refpricedependency
ORDER BY refforwardcurve_name, refforwardcurve_curvepointcode'
rs.clc<-RMySQL::dbGetQuery(con, qry)
qry<-'SELECT DISTINCT commodity, name, unit, currency, extracttype, pricedependency
FROM refforwardcurve
ORDER BY commodity, name'
rs.ptf<-RMySQL::dbGetQuery(con,qry)
RMySQL::dbDisconnect(con)
# sort markets by simulated & calculated risk factors, add labels
# construct vector F0 of current forward price vectors, calculate log returns
#
labels<-unique(apply(rs.sim, 1, function(x) paste(x['refforwardcurve_name'], '.', x['refforwardcurve_curvepointcode'], sep='')));
labels.clc<-unique(apply(rs.clc, 1, function(x) paste(x['refforwardcurve_name'], '.', x['refforwardcurve_curvepointcode'], sep='')));
exclude<-'refforwardcurve_pricinggroupid';
rs.sim.wide<-reshape(rs.sim[,-which(names(rs.sim) %in% exclude)], timevar="pricedate",idvar=c("refforwardcurve_name", "refforwardcurve_curvepointcode"), direction = 'wide', new.row.names = labels);
rs.clc.wide<-reshape(rs.clc, timevar='leg',idvar=c('refforwardcurve_name', 'refforwardcurve_curvepointcode'), direction='wide', new.row.names=labels.clc);
labels<-c(labels,labels.clc);
idx1<-apply(rs.clc.wide, 1, function(x) pmatch(paste(x['independentcurvename.1'], '.', x['independentcurvepointcode.1'], sep=''), labels, nomatch=0));
idx2<-apply(rs.clc.wide, 1, function(x) pmatch(paste(x['independentcurvename.2'], '.', x['independentcurvepointcode.2'], sep=''), labels, nomatch=0));
F0<-rs.sim.wide[,ncol(rs.sim.wide)];
F0.clc<-rs.clc.wide$weight.1*F0[idx1] + rs.clc.wide$weight.2*F0[idx2];
exclude<-c('refforwardcurve_name', 'refforwardcurve_curvepointcode');
rets<-apply(as.matrix(rs.sim.wide[,-which(names(rs.sim.wide) %in% exclude)]), 1, function(x) RcppCalculateReturns(x));
# calculate matrix of daily conditional EWMA (co)variances
# generate mvrnd samples from last observation (could select other estimator, e.g. Garch)
#
cov.ewma<-covEwma(as.data.frame(rets), lambda = 0.94);
var.ewma.last<-as.matrix(cov.ewma[40,,]);
cor.ewma<-stats::cov2cor(var.ewma.last);
vol2.ewma<-255*diag(var.ewma.last);
cor.spd <- RcppEigen(cor.ewma);
wi<-RcppMvrnorm(sims, cor.spd);
#system.time(RcppMvrnorm(1e6, cor.spd));
nuT<-0.5*vol2.ewma/255;
siT<-sqrt(vol2.ewma/255);
F1<-apply(wi, 1, function(x) F0*exp(nuT+siT*x));
F1.clc<-rs.clc.wide$weight.1*F1[idx1,] + rs.clc.wide$weight.2*F1[idx2,];
rownames(F1.clc)<-labels.clc;
F1<-rbind(F1,F1.clc);
F0<-c(F0,F0.clc);
# +++check+++
# plot(F1[1,]);
# hist(F1[1,]);
# fetch discounted positions of linear instruments (futures, forwards, swaps, deltas of exotics)
# look up corresponding simulated & calculated risk factors, calculate PnL on linear positions
#
P<-read.table('upload_positions.csv', header=TRUE, sep=",");
idx<-apply(P, 1, function(x) pmatch(x[2], labels, nomatch=0));
P0<-cbind(idx, P$discounted.position);
P0<-P0[order(P0[, 1]), ];
#+++check+++
# check on positions
pnl.lin<-P0[P0[,1]>0,2]*(F1-repmat(as.matrix(F0),1,sims));
pnl.lin.agg <-apply(pnl.lin,2,sum);
# +++check+++
# hist(pnl.lin.agg);
# qqnorm(pnl.lin.agg);
# fetch vanilla options positions and inputs, sort by corresponding risk factor
# calculate vanila options explicitly with simulated & calculated risk factors
#
tb<-read.table('upload_vanilla.csv', header=TRUE, sep=",");
idx<-apply(tb, 1, function(x) pmatch(x[1], labels, nomatch=0));
ttm<-0.001+(as.Date(as.character(tb$expiration.date))-as.Date(dt[41,]))/365;
tmp<-rbind(F0[idx], tb$put.call, tb$strike.price, 0.01*tb$volatility*sqrt(as.numeric(ttm)),
ttm, tb$discount.factor);
V0<-apply(tmp,2, function(x) RcppBlackFormula(ifelse(x[2]==1,'call','put'), x[3], x[1], x[4], x[5]));
tmp<-rbind(tmp, t(F1[idx,]));
sz<-dim(tmp);
V1<- matrix(data=NA,nrow=sims,ncol=sz[2]);
for(i in 1:sz[2])
V1[1:sims,i]<-RcppBlackFormulaArray(ifelse(tmp[2,i]==1,'call','put'), tmp[3,i], tmp[7:sz[1],i], tmp[4,i], tmp[5,i])
pnl.opt<-tb$volume*(V1-rep(V0,sims));
y<-.001*apply(pnl.opt,1,function(x) quantile(x, 1, probs=0.025, 0.975));
y<-as.data.frame(y, row.names=as.character(tb$risk.factor));
names(y)[1]<-'option.pnl';
tmp<- gsub("(\\b.SWAP\\b|\\b.FUTURES\\b|\\b.CRUDE\\b|\\b.GAS\\b|\\b.GASOLINE\\b|\\b.ULSD\\b)", "", rownames(y))
y$name<-gsub('[.0-9]','',tmp);
y$delivery<-gsub('[^0-9]','',tmp);
ggplot(y, aes(x=delivery, y=option.pnl, fill = delivery)) +
geom_bar(stat = "identity") + ggtitle('1-day 97.5% confidence value-at-risk on linear positions\nby reference curve and expressed in (Thousands)$') +
facet_grid(. ~ name) + scale_fill_discrete(name='delivery month') +
theme(plot.title=element_text(face='bold'), axis.text.x=element_blank(), axis.ticks.x=element_blank(),axis.text.y=element_text(colour='black'),
axis.title.x=element_text(colour='darkgrey'),axis.title.y=element_text(colour='darkgrey')) +
guides(fill=guide_legend(ncol=2)) +ylab('1-day value-at-risk')
ggplot(y, aes(x=delivery, y=option.pnl, fill = delivery)) +
geom_bar(stat = "identity") + ggtitle('1-day 97.5% confidence value-at-risk on options positions\nby reference curve and expressed in (Thousands)$') +
facet_grid(. ~ name) + scale_fill_discrete(name='delivery month') +
theme(plot.title=element_text(face='bold'), axis.text.x=element_blank(), axis.ticks.x=element_blank(),axis.text.y=element_text(colour='black'),
axis.title.x=element_text(colour='darkgrey'),axis.title.y=element_text(colour='darkgrey')) +
guides(fill=guide_legend(ncol=2)) +ylab('1-day value-at-risk')
pnl.opt.agg <-apply(pnl.opt,1,sum);
# aggregate PnL on linear and vanilla options positions
# calculate VaR, VaP & CVaR
#
pnl.agg<-pnl.lin.agg+pnl.opt.agg;
dim(pnl.agg)
length(pnl.agg)
xpos<-seq(-8e6, 8e6, by=5e5);
hist(pnl.agg, prob=TRUE, main='97.5% VaR', col='gray',xaxt='n', yaxt='n');
axis(1, at=xpos, labels=sprintf('%.1fmio', xpos/1e6));
curve(dnorm(x, mean=mean(pnl.agg), sd=sd(pnl.agg)), col='blue', lwd=3, add=TRUE)
abline(v=var[1], col='red', lwd=3);
pnl.agg<-pnl.lin.agg+pnl.opt.agg;
var<-quantile(pnl.agg, 1, probs=c(0.025, 0.975));
cvar<-mean(pnl.agg[pnl.agg<var[1]]);
xpos<-seq(-8e6, 8e6, by=5e5);
hist(pnl.agg, prob=TRUE, main='97.5% VaR', col='gray',xaxt='n', yaxt='n');
axis(1, at=xpos, labels=sprintf('%.1fmio', xpos/1e6));
curve(dnorm(x, mean=mean(pnl.agg), sd=sd(pnl.agg)), col='blue', lwd=3, add=TRUE)
abline(v=var[1], col='red', lwd=3);
#qqnorm(pnl)
xpos<-seq(-8e6, 8e6, by=5e5);
hist(pnl.agg, prob=TRUE, main='1-day 97.5% confidence value-at-risk', col='gray',xaxt='n', yaxt='n', xlab='aggregate pnl');
axis(1, at=xpos, labels=sprintf('%.1fmio', xpos/1e6));
curve(dnorm(x, mean=mean(pnl.agg), sd=sd(pnl.agg)), col='blue', lwd=3, add=TRUE)
abline(v=var[1], col='red', lwd=3);
#qqnorm(pnl)
cvar
var
xpos<-seq(-8e6, 8e6, by=5e5);
hist(pnl.agg, prob=TRUE, main='1-day 97.5% confidence value-at-risk\npurple,red and green indicate resp. expected shortfall, value-at-risk and profit.', col='gray',xaxt='n', yaxt='n', xlab='aggregate pnl', ylab='density');
axis(1, at=xpos, labels=sprintf('%.1fmio', xpos/1e6));
curve(dnorm(x, mean=mean(pnl.agg), sd=sd(pnl.agg)), col='blue', lwd=3, add=TRUE)
abline(v=var[1], col='red', lwd=3);
abline(v=var[2], col='green', lwd=3);
abline(v=cvar,col='purple', lwd=3);
#
xpos<-seq(-8e6, 8e6, by=5e5);
hist(pnl.agg, prob=TRUE, main='1-day 97.5% confidence value-at-risk\npurple,red and green indicate resp. expected shortfall, value-at-risk and profit.', col='gray',xaxt='n', yaxt='n', xlab='aggregate pnl', ylab='density',cex=.5);
axis(1, at=xpos, labels=sprintf('%.1fmio', xpos/1e6));
curve(dnorm(x, mean=mean(pnl.agg), sd=sd(pnl.agg)), col='blue', lwd=3, add=TRUE)
abline(v=var[1], col='red', lwd=3);
abline(v=var[2], col='green', lwd=3);
abline(v=cvar,col='purple', lwd=3);
xpos<-seq(-8e6, 8e6, by=5e5);
hist(pnl.agg, prob=TRUE, main='1-day 97.5% confidence value-at-risk\npurple,red and green indicate resp.\nexpected shortfall, value-at-risk and profit.', col='gray',xaxt='n', yaxt='n', xlab='aggregate pnl', ylab='density',cex=.5);
axis(1, at=xpos, labels=sprintf('%.1fmio', xpos/1e6));
curve(dnorm(x, mean=mean(pnl.agg), sd=sd(pnl.agg)), col='blue', lwd=3, add=TRUE)
abline(v=var[1], col='red', lwd=3);
abline(v=var[2], col='green', lwd=3);
abline(v=cvar,col='purple', lwd=3);
xpos<-seq(-8e6, 8e6, by=5e5);
hist(pnl.agg, prob=TRUE, main='1-day 97.5% confidence value-at-risk\npurple, red and green indicate resp.\nexpected shortfall, value-at-risk and profit.', col='gray',xaxt='n', yaxt='n', xlab='simulated pnl', ylab='density',cex=.5);
axis(1, at=xpos, labels=sprintf('%.1fmio', xpos/1e6));
curve(dnorm(x, mean=mean(pnl.agg), sd=sd(pnl.agg)), col='blue', lwd=3, add=TRUE)
abline(v=var[1], col='red', lwd=3);
abline(v=var[2], col='green', lwd=3);
abline(v=cvar,col='purple', lwd=3);
install.packages("sqldf")
install.packages(c("Hmisc", "manipulate", "MASS", "tseries"))
# clean up
rm(list=ls())
# initialize
library(XLConnect)
install.packages("XLConnectJars")
install.packages("XLConnect")
# clean up
rm(list=ls())
# initialize
library(XLConnect)
library(XLConnect)
library(XLConnect)
install.packages("XLConnect")
install.packages("~/Desktop/XLConnectJars_0.2-9.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/XLConnect_0.2-11.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/rJava_0.9-6.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/rJava_0.9-6.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/rJava_0.9-6.tar.gz", repos = NULL, type = "source")
install.packages("rJava")
install.packages("rJava")
install.packages("XLConnect")
install.packages(c("formatR", "highr", "jsonlite", "lattice", "manipulate", "mime"))
install.packages(c("Formula", "manipulate", "Matrix", "network", "rstudioapi"))
install.packages(c("gtools", "jsonlite", "manipulate"))
install.packages(c("evaluate", "inline", "manipulate"))
install.packages("Quandl")
require('Quandl')
Quandl.get('BNP/EURUSD')
Quanld::Quandl.get('BNP/EURUSD')
Quandl::Quandl.get('BNP/EURUSD')
require()
require('Quandl')
Quandl("BNP/EURUSD")
?Quandl
install.packages(c("manipulate", "Quandl", "RCurl"))
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("manipulate")
install.packages("RcppArmadillo")
install.packages("Rcpp")
install.packages("XLConnect")
install.packages("XLConnectJars")
install.packages("manipulate")
install.packages(c("manipulate", "Matrix"))
install.packages(c("chron", "data.table", "digest", "httr", "jsonlite", "manipulate", "Matrix", "mime", "plyr", "Quandl", "quantmod", "R6", "Rcpp", "RcppArmadillo", "RCurl", "RMySQL", "stringi", "TTR"))
install.packages(c("DBI", "jsonlite", "Matrix", "Quandl", "Rcpp", "RcppArmadillo", "RMySQL", "stringi", "tseries", "zoo"))
install.packages("RMySQL")
install.packages(c("httr", "mime", "RMySQL"))
install.packages("RMySQL")
install.packages(c("digest", "RMySQL"))
install.packages("XBRL")
install.packages("R6")
library(XBRL)
install.packages('XBRL')
install.packages('libxml2')
install.packages("finreportr")
install.packages('XBRL')
library(XBRL)
install.packages("~/Desktop/downloaded_packages/xml2_1.0.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/downloaded_packages/XBRL_0.99.17.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/downloaded_packages/finreportr_1.0.0.tar.gz", repos = NULL, type = "source")
install.packages("XBRL")
install.packages("~/Desktop/downloaded_packages/XBRL_0.99.17.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/downloaded_packages/XBRL_0.99.17.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/downloaded_packages/finreportr_1.0.0.tar.gz", repos = NULL, type = "source")
library('xbrl')
library('XBRL')
install.packages("~/Desktop/downloaded_packages/rvest_0.3.2.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/downloaded_packages/xml2_1.0.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/downloaded_packages/rvest_0.3.2.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/downloaded_packages/finreportr_1.0.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/downloaded_packages/dplyr_0.5.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/downloaded_packages/finreportr_1.0.0.tar.gz", repos = NULL, type = "source")
library('finreportr')
AnnualReports('FV')
AnnualReports('FB')
head(GetIncome("TSLA", 2015))
head(GetIncome('TSLA', 2015))
AnnualReports('TSLA')
GetBalanceSheet('AAPL', 2015)
CompanyInfo('AAPL')
GetBalanceSheet('AAPL', 2016)
GetBalanceSheet('AAPL', 2014)
GetCashFlow('AAPL', 2014)
library('curl')
install.packages("~/Desktop/downloaded_packages/httr_1.2.1.tar.gz", repos = NULL, type = "source")
GetBalanceSheet('AAPL', 2014)
source('/media/sf_financial_engineering_shared/systematic/_v2/fetchWts.r', echo=TRUE)
install.packages(c("BH", "chron", "curl", "data.table", "digest", "finreportr", "jsonlite", "Matrix", "openssl", "quantmod", "Rcpp", "RcppArmadillo", "reshape2", "RMySQL", "selectr", "tseries", "xml2", "zoo"))
??get.hist.quote
?get.hist.quote
require(zoo)
source('~/Desktop/sf_financial_engineering_shared/systematic/_v2/fetchWts.r', echo=TRUE)
install.packages("quantmod")
install.packages("Quandl")
install.packages("zoo")
install.packages("xts")
install.packages("tseries")
source('~/Desktop/sf_financial_engineering_shared/systematic/_v2/fetchWts.r', echo=TRUE)
require(quantmod)
source('~/Desktop/systematic_base-strat/fetchWts.r', echo=TRUE)
debugSource('~/Desktop/systematic_base-strat/fetchWts.r', echo=TRUE)
ticks
ticks[1]
class(ticks[1])
as.character(ticks)
source('~/Desktop/systematic_base-strat/fetchWts.r', echo=TRUE)
source('~/Desktop/systematic_base-strat/fetchWts.r', echo=TRUE)
'WIKI' &'/'
source('~/Desktop/systematic_base-strat/fetchWts.r', echo=TRUE)
raw
paste('WIKI/', ticks[i])
paste('WIKI/', ticks[i], sep = '')
source('~/Desktop/systematic_base-strat/fetchWts.r', echo=TRUE)
debugSource('~/Desktop/systematic_base-strat/fetchWts.r', echo=TRUE)
install.packages("BatchGetSymbols")
debugSource('~/Desktop/systematic_base-strat/fetchWts.r', echo=TRUE)
raw$price.close
raw
test<-raw$df.tickers[ticker==tickers[i],]
test<-raw$df.tickers[raw$df.ticker$ticker==tickers[i],]
test<-raw$df.tickers[raw$df.ticker$ticker==tickers[1],]
test
source('~/Desktop/systematic_base-strat/fetchWts.r', echo=TRUE)
source('~/Desktop/systematic_base-strat/fetchWts.r', echo=TRUE)
source('~/Desktop/systematic_base-strat/fetchWts.r', echo=TRUE)
head(raw
)
debugSource('~/Desktop/systematic_base-strat/fetchWts.r', echo=TRUE)
head(raw)
head(l.out)
head(l.out,5)
head(l.out$df.tickers,5)
source('~/Desktop/systematic_base-strat/fetchWts.r', echo=TRUE)
head(raw)
source('~/Desktop/systematic_base-strat/fetchWts.r', echo=TRUE)
head(cl,3)
source('~/Desktop/systematic_base-strat/fetchWts.r', echo=TRUE)
source('~/Desktop/systematic_base-strat/fetchWts.r', echo=TRUE)
source('~/Desktop/systematic_base-strat/fetchPos.r', echo=TRUE)
install.packages("PerformanceAnalytics")
source('~/Desktop/systematic_base-strat/fetchPos.r', echo=TRUE)
source('~/Desktop/systematic_base-strat/fetchPerf.r', echo=TRUE)
source('~/Desktop/systematic_base-strat/fetchWts.r', echo=TRUE)
source('~/Desktop/systematic_base-strat/fetchWts.r', echo=TRUE)
source('~/Desktop/systematic_base-strat/fetchWts.r', echo=TRUE)
source('~/Desktop/systematic_base-strat/fetchWts.r', echo=TRUE)
source('~/Desktop/systematic_base-strat/fetchPos.r', echo=TRUE)
warnings()
source('~/Desktop/systematic_base-strat/fetchPerf.r', echo=TRUE)
tail(x,10)
tail(a,10)
source('~/Desktop/systematic_base-strat/fetchPos.r', echo=TRUE)
warnings()
debugSource('~/Documents/Risk/getPrices1d.r', echo=TRUE)
install.packages("Rcpp")
debugSource('~/Documents/Risk/getPrices1d.r', echo=TRUE)
install.packages("pillar")
install.packages("RcppArmadillo")
debugSource('~/Documents/Risk/getPrices1d.r', echo=TRUE)
install.packages(c("BatchGetSymbols", "bindr", "bindrcpp", "curl", "dplyr", "openssl", "PerformanceAnalytics", "pillar", "plogr", "purrr", "quantmod", "Rcpp", "RcppArmadillo", "rlang", "selectr", "stringi", "stringr", "tidyr", "tseries", "utf8", "XML", "xts"))
install.packages("tidyr")
install.packages("IRkernel")
install.packages(c("assertthat", "BatchGetSymbols", "BH", "cli", "colorspace", "curl", "digest", "dplyr", "ggplot2", "glue", "gtable", "httr", "lazyeval", "mime", "openssl", "PerformanceAnalytics", "purrr", "quadprog", "Quandl", "quantmod", "R6", "Rcpp", "RcppArmadillo", "rvest", "stringi", "stringr", "tibble", "tidyr", "tseries", "XML", "xml2", "zoo"))
install.packages('roll')
install.packages("RcppArmadillo")
install.packages('roll')
install.packages('roll', dependencies-T)
install.package('roll', dependencies=TRUE)
usethis::edit_r_profile()
install.packages('roll')
usethis::edit_r_profile()
# append value indicators
df.fundies <- read.table(file = './data-raw/ptf-sharadar-indicators.csv', header = TRUE, sep = ',', quote = '')
df.ptf <- read.table(file = './data-raw/ptf.csv', header = TRUE, sep = ',')
df.fundies <- df.fundies %>%
dplyr::select(calendardate, ticker, dimension, datekey, ebit, ev, marketcap, revenue, sharesbas, tbvps) %>%
mutate(netdebt = ev - marketcap) %>% rename(ref.date = datekey) %>%
gather(variable, value, -(calendardate:ref.date)) %>%
unite(temp, dimension, variable) %>%
spread(temp, value) %>%
dplyr::select(calendardate, ticker, ref.date, ART_ebit, ARQ_netdebt, ART_revenue, ARQ_sharesbas, ARQ_tbvps) %>%
merge(df.ptf, by = 'ticker', all.x = TRUE)
foo <- df %>%
merge(df.fundies, by = c('ref.date', 'ticker'), all.x = TRUE) %>% group_by(ticker) %>%
fill(calendardate, ART_ebit, ARQ_netdebt, ART_revenue, ARQ_sharesbas, ARQ_tbvps) %>%
mutate(
cap = price.adjusted * ARQ_sharesbas,
ev = cap + ARQ_netdebt,
evebit = ev / ifelse(ART_ebit < 0, 0.001, ART_ebit),
evrevenue = ev / ART_revenue,
ptbv = price.adjusted / ifelse(ARQ_tbvps < 0, 0.001, ARQ_tbvps)
) %>% arrange(ref.date, ticker)
install.packages(c("curl", "digest", "pkgconfig", "purrr", "rlang", "roll", "TTR"))
usethis::edit_r_profile()
install.packages(c("curl", "pkgconfig", "purrr", "rlang", "roll", "TTR"))
usethis::edit_r_profile()
install.packages(c("digest", "future", "Matrix", "quadprog", "R6", "Rcpp", "rlang", "rvest", "scales", "selectr"))
usethis::edit_r_profile()
install.packages("DataExplorer")
install.packages(c("locfit", "PerformanceAnalytics"))
install.packages("PerformanceAnalytics")
install.packages("DataExplorer")
install.packages("knitr")
install.packages("data.table")
# initialize
rm(list=ls()) # clean up
require(rstudioapi)
current_path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path)) # set path
# data exploration
require(DataExplorer)
train.data <- read.csv("train.csv", stringsAsFactors = F)
plot_missing(train.data)
plot_bar(train.data)
plot_histogram(train.data)
plot_boxplot(train.data, by = 'SalePrice')
# initialize
rm(list=ls()) # clean up
require(rstudioapi)
current_path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path)) # set path
# data exploration
require(DataExplorer)
train.data <- read.csv("train.csv", stringsAsFactors = F)
#plot_missing(train.data)
#plot_bar(train.data)
#plot_histogram(train.data)
plot_boxplot(train.data, by = 'SalePrice')
